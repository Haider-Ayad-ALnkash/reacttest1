{"version":3,"sources":["components/types.js","App.js","components/Action.js","reportWebVitals.js","components/Reducer.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","App","state","text","date","Date","range","render_Reminders","reminders","props","className","map","reminder","moment","fromNow","onClick","remove_Reminder","id","type","placeholder","onChange","e","setState","target","value","this","add_Reminder","clear_allTasks","Component","connect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","read_cookie","Math","random","bake_cookie","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d35a466.chunk.js","sourcesContent":["export const ADD_REMINDER='ADD_REMINDER';\r\nexport const REMOVE_REMINDER='REMOVE_REMINDER';\r\nexport const CLEAR_REMINDERS='CLEAR_REMINDERS';","import moment from \"moment\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\n// import imgage from \"./note.jpg\";\nimport { add_Reminder ,remove_Reminder,clear_allTasks} from \"./components/Action\";\n\nclass App extends Component{\n    state={\n        text:'',\n        date: Date(),\n         range:''\n    }\n    render_Reminders = () =>{\n        const {reminders} = this.props;\n        return(\n            \n                <ul className=\"list-group\">\n                {\n                    reminders.map(reminder=>{\n                    \n                        return(\n                            <li key={reminder.id} className='list-group-item'>\n                                <div className=\"list-group-item list-group-item-action\">\n                                    <div className=\"d-flex w-100 justify-content-between\">\n                                    <h4 className=\"mb-1\">{reminder.text}</h4>\n                                    <small className=\"text-muted\">{ moment(new Date(reminder.date)).fromNow() }</small>\n                                    </div> \n                                    <small className=\"text-muted\">\n                                        <div className=\"remove btn btn-danger btn-right\" onClick={()=>this.props.remove_Reminder(reminder.id)} >X</div>\n                                    </small>\n                                </div>      \n                              </li>\n                                )\n                            })\n                        }\n                 </ul>\n        )\n    }\n    render(){\n        return(\n        <div className=\"App container\">\n                {/* <img src={imgage} alt=\"\"/> */}\n            <div className=\"reminder-title\">\n                <h2 className=\"text-center\">What Should U Do ? </h2>\n                </div>\n                <input \n                    className=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"Enter Your Task\"\n                    onChange={(e)=>this.setState({text:e.target.value})}\n                    value={this.state.text}\n                />\n                <input\n                    className=\"form-control\" \n                    type=\"datetime-local\"\n                    onChange={(e)=>this.setState({date:e.target.value})}\n                    value={this.state.date}\n                />\n                <button className=\"btn btn-primary btn-block\" \n                        onClick={()=>\n                            {this.props.add_Reminder(this.state.text,this.state.date,this.state.range)\n                                this.setState({text:'',date:Date('y')})\n                        }} \n                        >\n                        Add Task\n                </button>\n                    \n                <button className=\"btn btn-danger btn-block\" onClick={()=>this.props.clear_allTasks()}>Delete All Tasks </button>\n                {\n                    this.render_Reminders()\n                }\n            </div>\n        );\n    }\n}\nexport default connect( state =>{return{reminders:state}} ,{add_Reminder,remove_Reminder,clear_allTasks})(App);\n","import { ADD_REMINDER ,CLEAR_REMINDERS,REMOVE_REMINDER} from \"./types\"\r\n\r\nexport const add_Reminder=(text,date)=>{\r\n        const action={\r\n            type: ADD_REMINDER,\r\n            text,\r\n            date\r\n        } \r\n        return action\r\n}\r\nexport const remove_Reminder=(id)=>{\r\n    const action={\r\n        type:REMOVE_REMINDER,\r\n        id\r\n    }  \r\n    return action\r\n}\r\nexport const clear_allTasks=()=>{\r\n    const action={type:CLEAR_REMINDERS}\r\n    return action\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_REMINDER, CLEAR_REMINDERS, REMOVE_REMINDER } from \"./types\";\r\nimport { bake_cookie, read_cookie } from 'sfcookies'\r\nconst reminders=(state=[] , action)=>{\r\n    let reminders=null;\r\n    state=read_cookie('reminders')\r\n    if (action.type === ADD_REMINDER) {\r\n        reminders=[...state,{text:action.text,date:action.date,id:Math.random()} ]\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }else if(action.type === REMOVE_REMINDER){\r\n        reminders=state.filter(reminder=>reminder.id !== action.id)\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }else if(action.type === CLEAR_REMINDERS){\r\n        reminders=[]\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }else{\r\n        return state\r\n    }\r\n}\r\nexport default reminders","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reminders from './components/Reducer';\n\nconst store=createStore(reminders);\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}